# Autogenerated by python-libgen

from ctypes import RTLD_LOCAL, PyDLL, c_char_p

from importlib.resources import files, as_file

DLL_NAME = "core.so"

dll_resource = files("why3py.bin").joinpath(DLL_NAME)
with as_file(dll_resource) as dll_file:
    dll = PyDLL(str(dll_file), RTLD_LOCAL)

argv_t = c_char_p * 3
argv = argv_t(DLL_NAME.encode("utf-8"), b"register", None)
dll.caml_startup(argv)

import _core_internals  # type: ignore


from typing import Literal, TypeAlias, TypeVar, TypedDict, Union

A = TypeVar("A")

Result: TypeAlias = Union[
    tuple[Literal["Answer"], tuple[A]], tuple[Literal["Error"], tuple[str]]
]

Loc: TypeAlias = tuple[int, int, int, int]

Position: TypeAlias = tuple[str, int, int, int, int]

BigInt: TypeAlias = tuple[str]

AttributeIdent: TypeAlias = tuple[str]

RealValue: TypeAlias = tuple[BigInt, BigInt, BigInt]

RealLiteralKind: TypeAlias = Union[
    tuple[Literal["RLitUnk"], None],
    tuple[Literal["RLitDec"], tuple[int]],
    tuple[Literal["RLitHex"], tuple[int]],
]


class RealConstant(TypedDict, total=True):
    rl_kind: RealLiteralKind
    rl_real: RealValue


IntLiteralKind: TypeAlias = Union[
    tuple[Literal["ILitUnk"], None],
    tuple[Literal["ILitDec"], None],
    tuple[Literal["ILitHex"], None],
    tuple[Literal["ILitOct"], None],
    tuple[Literal["ILitBin"], None],
]

IntValue: TypeAlias = BigInt


class IntConstant(TypedDict, total=True):
    il_kind: IntLiteralKind
    il_int: IntValue


Constant: TypeAlias = Union[
    tuple[Literal["ConstInt"], tuple[IntConstant]],
    tuple[Literal["ConstReal"], tuple[RealConstant]],
    tuple[Literal["ConstStr"], tuple[str]],
]

Dbinop: TypeAlias = Union[
    tuple[Literal["DTand"], None],
    tuple[Literal["DTandAsym"], None],
    tuple[Literal["DTor"], None],
    tuple[Literal["DTorAsym"], None],
    tuple[Literal["DTimplies"], None],
    tuple[Literal["DTiff"], None],
    tuple[Literal["DTby"], None],
    tuple[Literal["DTso"], None],
]

Dquant: TypeAlias = Union[
    tuple[Literal["DTforall"], None],
    tuple[Literal["DTexists"], None],
    tuple[Literal["DTlambda"], None],
]

PropKind: TypeAlias = Union[
    tuple[Literal["Plemma"], None],
    tuple[Literal["Paxiom"], None],
    tuple[Literal["Pgoal"], None],
]

IndSign: TypeAlias = Union[
    tuple[Literal["Ind"], None], tuple[Literal["Coind"], None]
]

RsKind: TypeAlias = Union[
    tuple[Literal["RKnone"], None],
    tuple[Literal["RKlocal"], None],
    tuple[Literal["RKfunc"], None],
    tuple[Literal["RKpred"], None],
    tuple[Literal["RKlemma"], None],
]

AssertionKind: TypeAlias = Union[
    tuple[Literal["Assert"], None],
    tuple[Literal["Assume"], None],
    tuple[Literal["Check"], None],
]

ForDirection: TypeAlias = Union[
    tuple[Literal["To"], None], tuple[Literal["DownTo"], None]
]

Mask: TypeAlias = Union[
    tuple[Literal["MaskVisible"], None],
    tuple[Literal["MaskTuple"], tuple[list["Mask"]]],
    tuple[Literal["MaskGhost"], None],
]

Attr: TypeAlias = Union[
    tuple[Literal["ATstr"], tuple[AttributeIdent]],
    tuple[Literal["ATpos"], tuple[Position]],
]


class Ident(TypedDict, total=True):
    id_str: str
    id_ats: list[Attr]
    id_loc: Position


Qualid: TypeAlias = Union[
    tuple[Literal["Qident"], tuple[Ident]],
    tuple[Literal["Qdot"], tuple["Qualid", Ident]],
]

Pty: TypeAlias = Union[
    tuple[Literal["PTtyvar"], tuple[Ident]],
    tuple[Literal["PTtyapp"], tuple[Qualid, list["Pty"]]],
    tuple[Literal["PTtuple"], tuple[list["Pty"]]],
    tuple[Literal["PTref"], tuple[list["Pty"]]],
    tuple[Literal["PTarrow"], tuple["Pty", "Pty"]],
    tuple[Literal["PTscope"], tuple[Qualid, "Pty"]],
    tuple[Literal["PTparen"], tuple["Pty"]],
    tuple[Literal["PTpure"], tuple["Pty"]],
]

Ghost: TypeAlias = bool


class Pattern(TypedDict, total=True):
    pat_desc: "PatDesc"
    pat_loc: Position


PatDesc: TypeAlias = Union[
    tuple[Literal["Pwild"], None],
    tuple[Literal["Pvar"], tuple[Ident]],
    tuple[Literal["Papp"], tuple[Qualid, list[Pattern]]],
    tuple[Literal["Prec"], tuple[list[tuple[Qualid, Pattern]]]],
    tuple[Literal["Ptuple"], tuple[list[Pattern]]],
    tuple[Literal["Pas"], tuple[Pattern, Ident, Ghost]],
    tuple[Literal["Por"], tuple[Pattern, Pattern]],
    tuple[Literal["Pcast"], tuple[Pattern, Pty]],
    tuple[Literal["Pscope"], tuple[Qualid, Pattern]],
    tuple[Literal["Pparen"], tuple[Pattern]],
    tuple[Literal["Pghost"], tuple[Pattern]],
]

Binder: TypeAlias = tuple[Position, Ident | None, Ghost, Pty | None]

Param: TypeAlias = tuple[Position, Ident | None, Ghost, Pty]


class Term(TypedDict, total=True):
    term_desc: "TermDesc"
    term_loc: Position


TermDesc: TypeAlias = Union[
    tuple[Literal["Ttrue"], None],
    tuple[Literal["Tfalse"], None],
    tuple[Literal["Tconst"], tuple[Constant]],
    tuple[Literal["Tident"], tuple[Qualid]],
    tuple[Literal["Tasref"], tuple[Qualid]],
    tuple[Literal["Tidapp"], tuple[Qualid, list[Term]]],
    tuple[Literal["Tapply"], tuple[Term, Term]],
    tuple[Literal["Tinfix"], tuple[Term, Ident, Term]],
    tuple[Literal["Tinnfix"], tuple[Term, Ident, Term]],
    tuple[Literal["Tbinop"], tuple[Term, Dbinop, Term]],
    tuple[Literal["Tbinnop"], tuple[Term, Dbinop, Term]],
    tuple[Literal["Tnot"], tuple[Term]],
    tuple[Literal["Tif"], tuple[Term, Term, Term]],
    tuple[
        Literal["Tquant"], tuple[Dquant, list[Binder], list[list[Term]], Term]
    ],
    tuple[Literal["Teps"], tuple[Ident, Pty, Term]],
    tuple[Literal["Tattr"], tuple[Attr, Term]],
    tuple[Literal["Tlet"], tuple[Ident, Term, Term]],
    tuple[Literal["Tcase"], tuple[Term, list[tuple[Pattern, Term]]]],
    tuple[Literal["Tcast"], tuple[Term, Pty]],
    tuple[Literal["Ttuple"], tuple[list[Term]]],
    tuple[Literal["Trecord"], tuple[list[tuple[Qualid, Term]]]],
    tuple[Literal["Tupdate"], tuple[Term, list[tuple[Qualid, Term]]]],
    tuple[Literal["Tscope"], tuple[Qualid, Term]],
    tuple[Literal["Tat"], tuple[Term, Ident]],
]

Invariant: TypeAlias = list[Term]

Variant: TypeAlias = list[tuple[Term, Qualid | None]]

Pre: TypeAlias = Term

Post: TypeAlias = tuple[Position, list[tuple[Pattern, Term]]]

Xpost: TypeAlias = tuple[
    Position, list[tuple[Qualid, tuple[Pattern, Term] | None]]
]


class Spec(TypedDict, total=True):
    sp_pre: list[Pre]
    sp_post: list[Post]
    sp_xpost: list[Xpost]
    sp_reads: list[Qualid]
    sp_writes: list[Term]
    sp_alias: list[tuple[Term, Term]]
    sp_variant: Variant
    sp_checkrw: bool
    sp_diverge: bool
    sp_partial: bool


class Expr(TypedDict, total=True):
    expr_desc: "ExprDesc"
    expr_loc: Position


ExprDesc: TypeAlias = Union[
    tuple[Literal["Eref"], None],
    tuple[Literal["Etrue"], None],
    tuple[Literal["Efalse"], None],
    tuple[Literal["Econst"], tuple[Constant]],
    tuple[Literal["Eident"], tuple[Qualid]],
    tuple[Literal["Easref"], tuple[Qualid]],
    tuple[Literal["Eidapp"], tuple[Qualid, list[Expr]]],
    tuple[Literal["Eapply"], tuple[Expr, Expr]],
    tuple[Literal["Einfix"], tuple[Expr, Ident, Expr]],
    tuple[Literal["Einnfix"], tuple[Expr, Ident, Expr]],
    tuple[Literal["Elet"], tuple[Ident, Ghost, RsKind, Expr, Expr]],
    tuple[Literal["Erec"], tuple[list["Fundef"], Expr]],
    tuple[
        Literal["Efun"],
        tuple[list[Binder], Pty | None, Pattern, Mask, Spec, Expr],
    ],
    tuple[
        Literal["Eany"],
        tuple[list[Param], RsKind, Pty | None, Pattern, Mask, Spec],
    ],
    tuple[Literal["Etuple"], tuple[list[Expr]]],
    tuple[Literal["Erecord"], tuple[list[tuple[Qualid, Expr]]]],
    tuple[Literal["Eupdate"], tuple[Expr, list[tuple[Qualid, Expr]]]],
    tuple[Literal["Eassign"], tuple[list[tuple[Expr, Qualid | None, Expr]]]],
    tuple[Literal["Esequence"], tuple[Expr, Expr]],
    tuple[Literal["Eif"], tuple[Expr, Expr, Expr]],
    tuple[Literal["Ewhile"], tuple[Expr, Invariant, Variant, Expr]],
    tuple[Literal["Eand"], tuple[Expr, Expr]],
    tuple[Literal["Eor"], tuple[Expr, Expr]],
    tuple[Literal["Enot"], tuple[Expr]],
    tuple[
        Literal["Ematch"], tuple[Expr, list["RegBranch"], list["ExnBranch"]]
    ],
    tuple[Literal["Eabsurd"], None],
    tuple[Literal["Epure"], tuple[Term]],
    tuple[Literal["Eidpur"], tuple[Qualid]],
    tuple[Literal["Eraise"], tuple[Qualid, Expr | None]],
    tuple[Literal["Eexn"], tuple[Ident, Pty, Mask, Expr]],
    tuple[Literal["Eoptexn"], tuple[Ident, Mask, Expr]],
    tuple[
        Literal["Efor"],
        tuple[Ident, Expr, ForDirection, Expr, Invariant, Expr],
    ],
    tuple[Literal["Eassert"], tuple[AssertionKind, Term]],
    tuple[Literal["Escope"], tuple[Qualid, Expr]],
    tuple[Literal["Elabel"], tuple[Ident, Expr]],
    tuple[Literal["Ecast"], tuple[Expr, Pty]],
    tuple[Literal["Eghost"], tuple[Expr]],
    tuple[Literal["Eattr"], tuple[Attr, Expr]],
]

RegBranch: TypeAlias = tuple[Pattern, Expr]

ExnBranch: TypeAlias = tuple[Qualid, Pattern | None, Expr]

Fundef: TypeAlias = tuple[
    Ident, Ghost, RsKind, list[Binder], Pty | None, Pattern, Mask, Spec, Expr
]


class Field(TypedDict, total=True):
    f_loc: Position
    f_ident: Ident
    f_pty: Pty
    f_mutable: bool
    f_ghost: bool


TypeDef: TypeAlias = Union[
    tuple[Literal["TDalias"], tuple[Pty]],
    tuple[
        Literal["TDalgebraic"],
        tuple[list[tuple[Position, Ident, list[Param]]]],
    ],
    tuple[Literal["TDrecord"], tuple[list[Field]]],
    tuple[Literal["TDrange"], tuple[BigInt, BigInt]],
    tuple[Literal["TDfloat"], tuple[int, int]],
]

Visibility: TypeAlias = Union[
    tuple[Literal["Public"], None],
    tuple[Literal["Private"], None],
    tuple[Literal["Abstract"], None],
]


class TypeDecl(TypedDict, total=True):
    td_loc: Position
    td_ident: Ident
    td_params: list[Ident]
    td_vis: Visibility
    td_mut: bool
    td_inv: Invariant
    td_wit: Expr | None
    td_def: TypeDef


class LogicDecl(TypedDict, total=True):
    ld_loc: Position
    ld_ident: Ident
    ld_params: list[Param]
    ld_type: Pty | None
    ld_def: Term | None


class IndDecl(TypedDict, total=True):
    in_loc: Position
    in_ident: Ident
    in_params: list[Param]
    in_def: list[tuple[Position, Ident, Term]]


Metarg: TypeAlias = Union[
    tuple[Literal["Mty"], tuple[Pty]],
    tuple[Literal["Mfs"], tuple[Qualid]],
    tuple[Literal["Mps"], tuple[Qualid]],
    tuple[Literal["Max"], tuple[Qualid]],
    tuple[Literal["Mlm"], tuple[Qualid]],
    tuple[Literal["Mgl"], tuple[Qualid]],
    tuple[Literal["Mval"], tuple[Qualid]],
    tuple[Literal["Mstr"], tuple[str]],
    tuple[Literal["Mint"], tuple[int]],
]

CloneSubst: TypeAlias = Union[
    tuple[Literal["CStsym"], tuple[Qualid, list[Ident], Pty]],
    tuple[Literal["CSfsym"], tuple[Qualid, Qualid]],
    tuple[Literal["CSpsym"], tuple[Qualid, Qualid]],
    tuple[Literal["CSvsym"], tuple[Qualid, Qualid]],
    tuple[Literal["CSxsym"], tuple[Qualid, Qualid]],
    tuple[Literal["CSprop"], tuple[PropKind]],
    tuple[Literal["CSaxiom"], tuple[Qualid]],
    tuple[Literal["CSlemma"], tuple[Qualid]],
    tuple[Literal["CSgoal"], tuple[Qualid]],
]

Decl: TypeAlias = Union[
    tuple[Literal["Dtype"], tuple[list[TypeDecl]]],
    tuple[Literal["Dlogic"], tuple[list[LogicDecl]]],
    tuple[Literal["Dind"], tuple[IndSign, list[IndDecl]]],
    tuple[Literal["Dprop"], tuple[PropKind, Ident, Term]],
    tuple[Literal["Dlet"], tuple[Ident, Ghost, RsKind, Expr]],
    tuple[Literal["Drec"], tuple[list[Fundef]]],
    tuple[Literal["Dexn"], tuple[Ident, Pty, Mask]],
    tuple[Literal["Dmeta"], tuple[Ident, list[Metarg]]],
    tuple[Literal["Dcloneexport"], tuple[Position, Qualid, list[CloneSubst]]],
    tuple[Literal["Duseexport"], tuple[Qualid]],
    tuple[
        Literal["Dcloneimport"],
        tuple[Position, bool, Qualid, Ident | None, list[CloneSubst]],
    ],
    tuple[
        Literal["Duseimport"],
        tuple[Position, bool, list[tuple[Qualid, Ident | None]]],
    ],
    tuple[Literal["Dimport"], tuple[Qualid]],
    tuple[Literal["Dscope"], tuple[Position, bool, Ident, list["Decl"]]],
]

MlwFile: TypeAlias = Union[
    tuple[Literal["Modules"], tuple[list[tuple[Ident, list[Decl]]]]],
    tuple[Literal["Decls"], tuple[list[Decl]]],
]

Color: TypeAlias = Union[
    tuple[Literal["Premise"], None], tuple[Literal["Goal"], None]
]


class Obligation(TypedDict, total=True):
    name: str
    task: str
    goal_loc: Loc | None
    locs: list[tuple[Loc, Color]]
    proved: bool
    prover_answer: str
    prover_steps: int


Update: TypeAlias = tuple[Literal["AddedInvariant"], tuple[Loc]]

Diff: TypeAlias = Union[
    tuple[Literal["Updates"], tuple[list[Update]]],
    tuple[Literal["Mismatch"], tuple[Loc | None]],
]


def prove(src: str) -> Result[list[Obligation]]:
    return _core_internals.prove(src)


def diff(original: str, modified: str) -> Result[Diff]:
    return _core_internals.diff(original, modified)
