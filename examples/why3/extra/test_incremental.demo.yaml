#####
#####  Exploring our test example
#####  Do not add to the database
#####

- strategy: annotate_invariants_incrementally
  args:
    prog: |
      use int.Int

      let main () diverges =
        let ref x = 1 in
        let ref y = 0 in
        while y < 100000 do
          x <- x + y;
          y <- y + 1
        done;
        assert { x >= y }
  tests:
    - run | success
    - run 'useless' | failure
  queries:
    - query: ProposeInvariant
      args:
        prog: |
          use int.Int

          let main () diverges =
            let ref x = 1 in
            let ref y = 0 in
            while y < 100000 do
              x <- x + y;
              y <- y + 1
            done;
            assert { x >= y }
        feedback:
          error: null
          obligations:
            - name: VC for main (assertion)
              annotated: |-
                use int.Int

                let main () diverges =  (* GOAL *)
                  let ref x = 1 in
                  let ref y = 0 in
                  while y < 100000 do  (* premise *)
                    x <- x + y;
                    y <- y + 1
                  done;
                  assert { x >= y }  (* GOAL *)
              context: |-
                constant y : int

                constant x : int

                axiom H : not y < 100000
              goal: "goal main'vc : x >= y"
              message: |-
                Unknown (unknown)
                (0.01s, 5 steps)
        proposed_already: []
      answers:
      - answer: |
          ```
          x >= y
          ```
        example: false
      - answer: |
          ```
          x >= 0
          ```
        label: useless
        example: false
    - query: ProposeInvariant
      args:
        prog: |-
          use int.Int

          let main () diverges =
            let ref x = 1 in
            let ref y = 0 in
            while y < 100000 do
              invariant { x >= y }
              x <- x + y;
              y <- y + 1
            done;
            assert { x >= y }
        feedback:
          error: null
          obligations:
            - name: VC for main (loop invariant preservation)
              annotated: |-
                use int.Int

                let main () diverges =  (* GOAL *)
                  let ref x = 1 in
                  let ref y = 0 in
                  while y < 100000 do  (* premise *)
                    invariant { x >= y }  (* premise, GOAL *)
                    x <- x + y;  (* premise *)
                    y <- y + 1  (* premise *)
                  done;
                  assert { x >= y }
              context: |-
                constant y : int

                constant x : int

                axiom LoopInvariant : x >= y

                axiom H : y < 100000
              goal: "goal main'vc : (x + y) >= (y + 1)"
              message: |-
                Unknown (unknown)
                (0.01s, 7 steps)
        proposed_already: []
      answers:
        - answer: |
            ```
            x >= 1
            ```
          example: false
    - query: ProposeInvariant
      args:
        prog: |-
          use int.Int

          let main () diverges =
            let ref x = 1 in
            let ref y = 0 in
            while y < 100000 do
              invariant { x >= 1 }
              invariant { x >= y }
              x <- x + y;
              y <- y + 1
            done;
            assert { x >= y }
        feedback:
          error: null
          obligations:
            - name: VC for main (loop invariant preservation)
              annotated: |-
                use int.Int

                let main () diverges =  (* GOAL *)
                  let ref x = 1 in
                  let ref y = 0 in
                  while y < 100000 do  (* premise *)
                    invariant { x >= 1 }  (* premise, GOAL *)
                    invariant { x >= y }  (* premise *)
                    x <- x + y;  (* premise *)
                    y <- y + 1  (* premise *)
                  done;
                  assert { x >= y }
              context: |-
                constant y : int

                constant x : int

                axiom LoopInvariant1 : x >= 1

                axiom LoopInvariant2 : x >= y

                axiom H : y < 100000
              goal: "goal main'vc : (x + y) >= 1"
              message: |-
                Unknown (unknown)
                (0.00s, 7 steps)
        proposed_already: []
      answers:
        - answer: |
            ```
            y >= 0
            ```
          example: false
