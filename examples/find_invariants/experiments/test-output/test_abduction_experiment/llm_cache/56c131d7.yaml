- input:
    request:
      chat:
      - role: system
        content: "fun: check\nargs:\n  prog: |-\n    use int.Int\n\n    let main ()\
          \ diverges =\n      let ref x = any int in\n      let ref y = any int in\n\
          \      x <- 1;\n      y <- 0;\n      while y < 100000 do\n        x <- x\
          \ + y;\n        y <- y + 1\n      done;\n      assert { x >= y }\n  annotated:\
          \ |-\n    use int.Int\n\n    let main () diverges =\n      let ref x = any\
          \ int in\n      let ref y = any int in\n      x <- 1;\n      y <- 0;\n \
          \     while y < 100000 do\n        x <- x + y;\n        y <- y + 1\n   \
          \   done;\n      assert { x >= y }\n"
      - role: user
        content: "fun: check\nargs:\n  prog: |-\n    use int.Int\n\n    let main ()\
          \ diverges =\n      let ref x = any int in\n      let ref y = any int in\n\
          \      x <- 1;\n      y <- 0;\n      while y < 100000 do\n        x <- x\
          \ + y;\n        y <- y + 1\n      done;\n      assert { x >= y }\n  annotated:\
          \ |-\n    use int.Int\n\n    let main () diverges =\n      let ref x = any\
          \ int in\n      let ref y = any int in\n      x <- 1;\n      y <- 0;\n \
          \     while y < 100000 do\n        x <- x + y;\n        y <- y + 1\n   \
          \   done;\n      assert { x >= y }\n"
      num_completions: 1
      options: {}
      tools: []
      structured_output: null
    iter: 1
  output:
    outputs:
    - content: "error:\nobligations:\n  - name: VC for main (assertion)\n    proved:\
        \ no\n    relevance_hints: |-\n      use int.Int\n\n      let main () diverges\
        \ =  (* GOAL *)\n        let ref x = any int in\n        let ref y = any int\
        \ in\n        x <- 1;\n        y <- 0;\n        while y < 100000 do  (* premise\
        \ *)\n          x <- x + y;\n          y <- y + 1\n        done;\n       \
        \ assert { x >= y }  (* GOAL *)\n    goal_formula: x >= y\n"
      tool_calls: []
      finish_reason: stop
      logprobs: null
      reasoning_content: null
    budget:
      values: {}
    log_items: []
    model_name: null
    usage_info: null
- input:
    request:
      chat:
      - role: system
        content: "fun: check\nargs:\n  prog: |-\n    use int.Int\n\n    let main ()\
          \ diverges =\n      let ref x = any int in\n      let ref y = any int in\n\
          \      x <- 1;\n      y <- 0;\n      while y < 100000 do\n        x <- x\
          \ + y;\n        y <- y + 1\n      done;\n      assert { x >= y }\n  annotated:\
          \ |-\n    use int.Int\n\n    let main () diverges =\n      let ref x = any\
          \ int in\n      let ref y = any int in\n      x <- 1;\n      y <- 0;\n \
          \     while y < 100000 do\n        x <- x + y;\n        y <- y + 1\n   \
          \   done;\n      assert { x >= y }\n"
      - role: user
        content: "fun: check\nargs:\n  prog: |-\n    use int.Int\n\n    let main ()\
          \ diverges =\n      let ref x = any int in\n      let ref y = any int in\n\
          \      x <- 1;\n      y <- 0;\n      while y < 100000 do\n        x <- x\
          \ + y;\n        y <- y + 1\n      done;\n      assert { x >= y }\n  annotated:\
          \ |-\n    use int.Int\n\n    let main () diverges =\n      let ref x = any\
          \ int in\n      let ref y = any int in\n      x <- 1;\n      y <- 0;\n \
          \     while y < 100000 do\n        x <- x + y;\n        y <- y + 1\n   \
          \   done;\n      assert { x >= y }\n"
      num_completions: 1
      options: {}
      tools: []
      structured_output: null
    iter: 2
  output:
    outputs:
    - content: "error:\nobligations:\n  - name: VC for main (assertion)\n    proved:\
        \ no\n    relevance_hints: |-\n      use int.Int\n\n      let main () diverges\
        \ =  (* GOAL *)\n        let ref x = any int in\n        let ref y = any int\
        \ in\n        x <- 1;\n        y <- 0;\n        while y < 100000 do  (* premise\
        \ *)\n          x <- x + y;\n          y <- y + 1\n        done;\n       \
        \ assert { x >= y }  (* GOAL *)\n    goal_formula: x >= y\n"
      tool_calls: []
      finish_reason: stop
      logprobs: null
      reasoning_content: null
    budget:
      values: {}
    log_items: []
    model_name: null
    usage_info: null
