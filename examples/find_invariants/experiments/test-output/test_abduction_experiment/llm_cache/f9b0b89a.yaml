- input:
    request:
      chat:
      - role: system
        content: "fun: check\nargs:\n  prog: |-\n    use int.Int\n\n    let main ()\
          \ diverges =\n      let ref x = any int in\n      let ref y = any int in\n\
          \      x <- 1;\n      y <- 0;\n      while y < 100000 do\n        invariant\
          \ { x >= y * (y - 1) / 2 }\n        x <- x + y;\n        y <- y + 1\n  \
          \    done;\n      assert { true }\n  annotated: |-\n    use int.Int\n\n\
          \    let main () diverges =\n      let ref x = any int in\n      let ref\
          \ y = any int in\n      x <- 1;\n      y <- 0;\n      while y < 100000 do\n\
          \        invariant { x >= y * (y - 1) / 2 }\n        x <- x + y;\n     \
          \   y <- y + 1\n      done;\n      assert { true }\n"
      - role: user
        content: "fun: check\nargs:\n  prog: |-\n    use int.Int\n\n    let main ()\
          \ diverges =\n      let ref x = any int in\n      let ref y = any int in\n\
          \      x <- 1;\n      y <- 0;\n      while y < 100000 do\n        invariant\
          \ { x >= y * (y - 1) / 2 }\n        x <- x + y;\n        y <- y + 1\n  \
          \    done;\n      assert { true }\n  annotated: |-\n    use int.Int\n\n\
          \    let main () diverges =\n      let ref x = any int in\n      let ref\
          \ y = any int in\n      x <- 1;\n      y <- 0;\n      while y < 100000 do\n\
          \        invariant { x >= y * (y - 1) / 2 }\n        x <- x + y;\n     \
          \   y <- y + 1\n      done;\n      assert { true }\n"
      num_completions: 1
      options: {}
      tools: []
      structured_output: null
    iter: 1
  output:
    outputs:
    - content: 'error: ''File line 9, characters 33-34: unbound function or predicate
        symbol ''''(/)''''''

        obligations: []

        '
      tool_calls: []
      finish_reason: stop
      logprobs: null
      reasoning_content: null
    budget:
      values: {}
    log_items: []
    model_name: null
    usage_info: null
