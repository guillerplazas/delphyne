- input:
    request:
      chat:
      - role: system
        content: "fun: check\nargs:\n  prog: |-\n    use int.Int\n\n    let main ()\
          \ diverges =\n      let ref x = any int in\n      let ref y = any int in\n\
          \      assume { x >= 0 };\n      assume { x <= 10 };\n      assume { y <=\
          \ 10 };\n      assume { y >= 0 };\n      while any bool do\n        x <-\
          \ x + 10;\n        y <- y + 10\n      done;\n      if x = 20 then\n    \
          \    assert { y <> 0 }\n  annotated: |-\n    use int.Int\n\n    let main\
          \ () diverges =\n      let ref x = any int in\n      let ref y = any int\
          \ in\n      assume { x >= 0 };\n      assume { x <= 10 };\n      assume\
          \ { y <= 10 };\n      assume { y >= 0 };\n      while any bool do\n    \
          \    x <- x + 10;\n        y <- y + 10\n      done;\n      if x = 20 then\n\
          \        assert { y <> 0 }\n"
      - role: user
        content: "fun: check\nargs:\n  prog: |-\n    use int.Int\n\n    let main ()\
          \ diverges =\n      let ref x = any int in\n      let ref y = any int in\n\
          \      assume { x >= 0 };\n      assume { x <= 10 };\n      assume { y <=\
          \ 10 };\n      assume { y >= 0 };\n      while any bool do\n        x <-\
          \ x + 10;\n        y <- y + 10\n      done;\n      if x = 20 then\n    \
          \    assert { y <> 0 }\n  annotated: |-\n    use int.Int\n\n    let main\
          \ () diverges =\n      let ref x = any int in\n      let ref y = any int\
          \ in\n      assume { x >= 0 };\n      assume { x <= 10 };\n      assume\
          \ { y <= 10 };\n      assume { y >= 0 };\n      while any bool do\n    \
          \    x <- x + 10;\n        y <- y + 10\n      done;\n      if x = 20 then\n\
          \        assert { y <> 0 }\n"
      num_completions: 1
      options: {}
      tools: []
      structured_output: null
    iter: 1
  output:
    outputs:
    - content: "error:\nobligations:\n  - name: VC for main (assertion)\n    proved:\
        \ no\n    relevance_hints: |-\n      use int.Int\n\n      let main () diverges\
        \ =  (* GOAL *)\n        let ref x = any int in  (* premise *)\n        let\
        \ ref y = any int in  (* premise *)\n        assume { x >= 0 };  (* premise\
        \ *)\n        assume { x <= 10 };  (* premise *)\n        assume { y <= 10\
        \ };  (* premise *)\n        assume { y >= 0 };  (* premise *)\n        while\
        \ any bool do\n          x <- x + 10;\n          y <- y + 10\n        done;\n\
        \        if x = 20 then  (* premise *)\n          assert { y <> 0 }  (* GOAL\
        \ *)\n    goal_formula: not y = 0\n"
      tool_calls: []
      finish_reason: stop
      logprobs: null
      reasoning_content: null
    budget:
      values: {}
    log_items: []
    model_name: null
    usage_info: null
