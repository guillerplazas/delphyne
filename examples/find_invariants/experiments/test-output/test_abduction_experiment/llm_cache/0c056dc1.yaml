- input:
    request:
      chat:
      - role: system
        content: "fun: check\nargs:\n  prog: |-\n    use int.Int\n\n    let main ()\
          \ diverges =\n      let ref x = any int in\n      let ref y = any int in\n\
          \      assume { x >= 0 };\n      assume { x <= 10 };\n      assume { y <=\
          \ 10 };\n      assume { y >= 0 };\n      while any bool do\n        invariant\
          \ { x / 10 >= y / 10  }\n        x <- x + 10;\n        y <- y + 10\n   \
          \   done;\n      if x = 20 then\n        assert { true }\n  annotated: |-\n\
          \    use int.Int\n\n    let main () diverges =\n      let ref x = any int\
          \ in\n      let ref y = any int in\n      assume { x >= 0 };\n      assume\
          \ { x <= 10 };\n      assume { y <= 10 };\n      assume { y >= 0 };\n  \
          \    while any bool do\n        invariant { x / 10 >= y / 10  }\n      \
          \  x <- x + 10;\n        y <- y + 10\n      done;\n      if x = 20 then\n\
          \        assert { true }\n"
      - role: user
        content: "fun: check\nargs:\n  prog: |-\n    use int.Int\n\n    let main ()\
          \ diverges =\n      let ref x = any int in\n      let ref y = any int in\n\
          \      assume { x >= 0 };\n      assume { x <= 10 };\n      assume { y <=\
          \ 10 };\n      assume { y >= 0 };\n      while any bool do\n        invariant\
          \ { x / 10 >= y / 10  }\n        x <- x + 10;\n        y <- y + 10\n   \
          \   done;\n      if x = 20 then\n        assert { true }\n  annotated: |-\n\
          \    use int.Int\n\n    let main () diverges =\n      let ref x = any int\
          \ in\n      let ref y = any int in\n      assume { x >= 0 };\n      assume\
          \ { x <= 10 };\n      assume { y <= 10 };\n      assume { y >= 0 };\n  \
          \    while any bool do\n        invariant { x / 10 >= y / 10  }\n      \
          \  x <- x + 10;\n        y <- y + 10\n      done;\n      if x = 20 then\n\
          \        assert { true }\n"
      num_completions: 1
      options: {}
      tools: []
      structured_output: null
    iter: 1
  output:
    outputs:
    - content: 'error: ''File line 11, characters 18-19: unbound function or predicate
        symbol ''''(/)''''''

        obligations: []

        '
      tool_calls: []
      finish_reason: stop
      logprobs: null
      reasoning_content: null
    budget:
      values: {}
    log_items: []
    model_name: null
    usage_info: null
