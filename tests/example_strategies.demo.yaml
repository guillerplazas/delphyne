#####
##### Simple unit tests for the server
#####


##### Used for testing the UI

- strategy: make_sum
  args:
    allowed: [9, 6, 2]
    goal: 11
  tests:
    - run
  queries: []


##### Testing make_sum


- demonstration: make_sum_demo
  strategy: make_sum
  args:
    allowed: [9, 6, 2]
    goal: 11
  tests:
    - run | success
    - run 'wrong_sum' | success  # error
    - run 'alt_order'
    - failure | run
  queries:
    - query: MakeSum
      args:
        allowed: [9, 6, 2]
        goal: 11
      answers:
        - answer: "[9, 2]"
        - label: "wrong_sum"
          answer: "[9, 6]"
        - label: "alt_order"
          answer: "[2, 9]"
  expect:
    trace:
      nodes:
        1: {kind: Branch}
        2: {kind: Success}
        3: {kind: Failure}
        4: {kind: Success}
    test_feedback:
      - node_id: 2
        diagnostics: __empty__
      - node_id: 3
        diagnostics:
          - ["error", "Success check failed."]
      - node_id: 4
        diagnostics: __empty__
      - node_id: 1
        diagnostics:
          - ["error", "Failure check failed."]


- demonstration: make_sum_selectors
  strategy: make_sum
  args:
    allowed: [9, 6, 2]
    goal: 11
  tests:
    - run 'wrong_sum'
    - run 'unknown_hint'
  queries:
    - query: MakeSum
      args:
        allowed: [9, 6, 2]
        goal: 11
      answers:
        - answer: "[9, 2]"
        - label: "wrong_sum"
          answer: "[9, 6]"
  expect:
    trace:
      nodes:
        1: {kind: Branch}
        2: {kind: Failure}
        3: {kind: Success}
    test_feedback:
      - node_id: 2
      - node_id: 3
        diagnostics:
          - ["warning", "Unused hints: 'unknown_hint'."]


- demonstration: make_sum_at
  strategy: make_sum
  args:
    allowed: [9, 6, 2]
    goal: 11
  tests:
    - at Unknown
    - at MakeSum | run
  queries:
    - query: MakeSum
      args:
        allowed: [9, 6, 2]
        goal: 11
      answers:
        - answer: "[9, 2]"
        - label: "wrong_sum"
          answer: "[9, 6]"
  expect:
    trace:
      nodes:
        1: {kind: Branch}
        2: {kind: Success}
    test_feedback:
      - node_id: 2
        diagnostics:
          - ["warning", "Leaf node reached before 'Unknown'."]
      - diagnostics: __empty__


- demonstration: make_sum_stuck
  strategy: make_sum
  args:
    allowed: [9, 6, 2]
    goal: 11
  tests:
    - run
  queries: []
  expect:
    trace:
      nodes: {1: {kind: Branch}}
    test_feedback:
      - diagnostics: [["warning", "Test is stuck."]]
        node_id: 1


- demonstration: make_sum_test_parse_error
  strategy: make_sum
  args:
    allowed: [9, 6, 2]
    goal: 11
  tests:
    - bad_command
  queries: []
  expect:
    test_feedback:
      - diagnostics: [["error", "Syntax error."]]


- demonstration: trivial_strategy
  strategy: trivial_strategy
  args: {}
  tests: [run]
  queries: []
  expect: {trace: {nodes: {1: {kind: Success}}}}


- demonstration: buggy_strategy
  strategy: buggy_strategy
  args: {}
  tests: [run]
  queries: []
  expect:
    global_diagnostics:
      - ["error"]


- demonstration: strategy_not_found
  strategy: unknown_strategy
  args: {}
  tests: [run]
  queries: []
  expect:
    global_diagnostics:
      - ["error"]


- demonstration: invalid_arguments
  strategy: make_sum
  args:
    bad_arg: "foo"
  tests: [run]
  queries: []
  expect:
    global_diagnostics:
      - ["error"]


- demonstration: unknown_query
  strategy: make_sum
  args:
    allowed: [9, 6, 2]
    goal: 11
  tests:
    - run
  queries:
    - query: MakeSum
      args:
        allowed: [9, 6, 2]
        goal: 11
      answers: []
    - query: UnknownQuery
      args: {}
      answers: []
  expect:
    query_diagnostics:
      - [1, ["error"]]


- demonstration: invalid_answer
  strategy: make_sum
  args:
    allowed: [9, 6, 2]
    goal: 11
  tests:
    - run
  queries:
    - query: MakeSum
      args:
        allowed: [9, 6, 2]
        goal: 11
      answers:
        - answer: "'foo'"
  expect:
    answer_diagnostics:
      - [[0, 0], ["error"]]


##### Testing synthetize_fun


- demonstration: synthetize_fun_demo
  strategy: synthetize_fun
  args:
    vars: &vars_1 ["x", "y"]
    prop: &prop_1 [["a", "b"], "F(a, b) == F(b, a) and F(0, 1) == 2"]
  tests:
    - run | success
    # - run 'invalid' | failure
    # - at conjecture_expr | go disprove('wrong1') | save wrong1
    # - load wrong1 | run | success
    # - load wrong1 | run 'bad_cex' | failure
    # - load wrong1 | run 'malformed_cex' | failure
    # - at conjecture_expr | go aggregate(['', 'wrong1', 'wrong2'])
    # - at conjecture_expr | go aggregate(['', 'unknown', 'wrong2'])
    # - at conjecture_expr | answer aggregate(['wrong1', 'wrong2'])
    # - at conjecture_expr | answer aggregate(['', 'wrong1', 'wrong2'])
  queries:
    - query: ConjectureExpr
      args: {vars: *vars_1, prop: *prop_1}
      answers:
        - label: right
          answer: "2*(x + y)"
        - label: wrong1
          answer: "x + 2*y"
        - label: wrong2
          answer: "2*y + x"
        - label: invalid
          answer: "sys.exit()"
    - query: ProposeCex
      args: {prop: *prop_1, fun: [[x, y], "x + 2*y"]}
      answers:
        - answer: "{a: 0, b: 1}"
        - label: malformed_cex
          answer: "{x: 1, y: 1}"
        - label: bad_cex
          answer: "{a: 0, b: 0}"
    - query: RemoveDuplicates
      args:
        exprs: ["2*(x + y)", "x + 2*y", "2*y + x"]
      answers:
        - answer: '["2*(x + y)", "x + 2*y"]'
  expect:
    test_feedback:
      - diagnostics: __empty__
      - diagnostics: __empty__
      - diagnostics: __empty__
      - diagnostics: __empty__
      - diagnostics: __empty__
      - diagnostics: __empty__
      - diagnostics:
        - - "error"
          - "Not a subtree: aggregate(['', 'wrong1', 'wrong2'])."
      - diagnostics:
        - - "warning"
          - "Unused hints: 'unknown'."
      - diagnostics:
        - - "error"
      - diagnostics: __empty__

    global_diagnostics: __empty__
    saved_nodes: {wrong1: __any__}


##### Testing pick_nice_boy_name


- demonstration: test_iterated
  strategy: pick_nice_boy_name
  args:
    names: ["Adeline", "Noah", "Julia", "Jonathan"]
  tests:
    - run | success
    - run 'girl_name' | failure
    - run 'other_boy_name' | failure
    - go gen | go next([])
    - go gen | go next([next([]){'other_boy_name'}]) | run | success
  queries:
    - query: PickBoyName
      args:
        names: [Adeline, Noah, Julia, Jonathan]
        picked_already: []
      answers:
      - answer: "Jonathan"
      - label: girl_name
        answer: "Julia"
      - label: other_boy_name
        answer: "Noah"
    - query: PickBoyName
      args:
        names: [Adeline, Noah, Julia, Jonathan]
        picked_already: [Noah]
      answers:
        - answer: "Jonathan"
  expect:
    test_feedback:
      - diagnostics: __empty__
      - diagnostics: __empty__
      - diagnostics: __empty__
      - diagnostics: __empty__
      - diagnostics: __empty__